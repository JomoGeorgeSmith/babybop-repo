{"ast":null,"code":"var _jsxFileName = \"/Users/jomosmith/Desktop/Baby Bop/babybop/src/Album.js\";\nimport React, { useState } from 'react';\nimport Track from './Track';\n\n// const Album = ({ album }) => {\n//   const { coverUrl, title, artist, tracks } = album;\n//   const [currentTrackIndex, setCurrentTrackIndex] = useState(null);\n\n//   const playAll = () => {\n//     setCurrentTrackIndex(0);\n//   };\n\n//   const playTrack = (index) => {\n//     setCurrentTrackIndex(index);\n//   };\n\n//   const handleTrackEnded = () => {\n//     if (currentTrackIndex < tracks.length - 1) {\n//       setCurrentTrackIndex(currentTrackIndex + 1);\n//     } else {\n//       setCurrentTrackIndex(null);\n//     }\n//   };\n\n//   return (\n//     <div className=\"album\">\n//       <img src={coverUrl} alt={title} />\n//       <h2>{title}</h2>\n//       <h3>{artist}</h3>\n//       <button onClick={playAll}>Play All</button>\n//       <ul>\n//         {tracks.map((track, index) => (\n//           <Track\n//             key={index}\n//             track={track}\n//             onPlay={() => playTrack(index)}\n//             isPlaying={index === currentTrackIndex}\n//           />\n//         ))}\n//       </ul>\n//       {currentTrackIndex !== null && (\n//         <audio\n//           src={tracks[currentTrackIndex].audioUrl}\n//           autoPlay\n//           onEnded={handleTrackEnded}\n//         />\n//       )}\n//     </div>\n//   );\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Album = _ref => {\n  let {\n    album\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"album\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: `assets/albums/${album.id}/cover.png`,\n      alt: album.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: album.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: album.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Play All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), album.tracks.map(track => /*#__PURE__*/_jsxDEV(Track, {\n      track: track\n    }, track.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = Album;\nexport default Album;\nvar _c;\n$RefreshReg$(_c, \"Album\");","map":{"version":3,"names":["React","useState","Track","jsxDEV","_jsxDEV","Album","_ref","album","className","children","src","id","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","description","tracks","map","track","_c","$RefreshReg$"],"sources":["/Users/jomosmith/Desktop/Baby Bop/babybop/src/Album.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Track from './Track';\n\n// const Album = ({ album }) => {\n//   const { coverUrl, title, artist, tracks } = album;\n//   const [currentTrackIndex, setCurrentTrackIndex] = useState(null);\n\n//   const playAll = () => {\n//     setCurrentTrackIndex(0);\n//   };\n\n//   const playTrack = (index) => {\n//     setCurrentTrackIndex(index);\n//   };\n\n//   const handleTrackEnded = () => {\n//     if (currentTrackIndex < tracks.length - 1) {\n//       setCurrentTrackIndex(currentTrackIndex + 1);\n//     } else {\n//       setCurrentTrackIndex(null);\n//     }\n//   };\n\n\n  \n//   return (\n//     <div className=\"album\">\n//       <img src={coverUrl} alt={title} />\n//       <h2>{title}</h2>\n//       <h3>{artist}</h3>\n//       <button onClick={playAll}>Play All</button>\n//       <ul>\n//         {tracks.map((track, index) => (\n//           <Track\n//             key={index}\n//             track={track}\n//             onPlay={() => playTrack(index)}\n//             isPlaying={index === currentTrackIndex}\n//           />\n//         ))}\n//       </ul>\n//       {currentTrackIndex !== null && (\n//         <audio\n//           src={tracks[currentTrackIndex].audioUrl}\n//           autoPlay\n//           onEnded={handleTrackEnded}\n//         />\n//       )}\n//     </div>\n//   );\n// };\n\n\nconst Album = ({ album }) => {\n  return (\n    <div className=\"album\">\n      <img src={`assets/albums/${album.id}/cover.png`} alt={album.title} />\n      <h3>{album.title}</h3>\n      <p>{album.description}</p>\n      <button>Play All</button>\n      {album.tracks.map((track) => (\n        <Track key={track.id} track={track} />\n      ))}\n    </div>\n  );\n};\n\nexport default Album;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,SAAS;;AAE3B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,KAAK,GAAGC,IAAA,IAAe;EAAA,IAAd;IAAEC;EAAM,CAAC,GAAAD,IAAA;EACtB,oBACEF,OAAA;IAAKI,SAAS,EAAC,OAAO;IAAAC,QAAA,gBACpBL,OAAA;MAAKM,GAAG,EAAG,iBAAgBH,KAAK,CAACI,EAAG,YAAY;MAACC,GAAG,EAAEL,KAAK,CAACM;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACrEb,OAAA;MAAAK,QAAA,EAAKF,KAAK,CAACM;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACtBb,OAAA;MAAAK,QAAA,EAAIF,KAAK,CAACW;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC1Bb,OAAA;MAAAK,QAAA,EAAQ;IAAQ;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,EACxBV,KAAK,CAACY,MAAM,CAACC,GAAG,CAAEC,KAAK,iBACtBjB,OAAA,CAACF,KAAK;MAAgBmB,KAAK,EAAEA;IAAM,GAAvBA,KAAK,CAACV,EAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACrB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAACK,EAAA,GAZIjB,KAAK;AAcX,eAAeA,KAAK;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}